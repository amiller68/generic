 name: ðŸš€ Deploy Infrastructure and Services

 on:
   push:
     branches: [main, dev]
     paths:
       - "apps/**"
       - "packages/**"
       - "iac/**"
       - ".github/workflows/deploy.yml"
   workflow_dispatch:
     inputs:
       services:
         description: "Comma-separated list of services to build"
         required: false
         default: ""
         type: string
       skip-build:
         description: "Skip the build step"
         required: false
         default: false
         type: boolean

 permissions:
   contents: read

 jobs:
   terraform-apply:
     name: Terraform Apply
     runs-on: ubuntu-latest
     defaults:
       run:
         working-directory: iac/envs

     steps:
       - name: Checkout
         uses: actions/checkout@v3

       - name: Setup Terraform
         uses: hashicorp/setup-terraform@v2
         with:
           terraform_version: 1.5.7

       - name: Configure AWS Credentials
         uses: aws-actions/configure-aws-credentials@v2
         with:
           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
           aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
           aws-region: us-east-1

       - name: Determine Environment
         id: env
         run: |
           if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
             echo "env_path=production" >> $GITHUB_OUTPUT
           else
             echo "Unsupported branch: ${{ github.ref }}"
             exit 1
           fi

       - name: Terraform Init and Apply ECR
         run: |
           cd ./ecr
           terraform init
           terraform apply -auto-approve

       - name: Terraform Init and Apply Environment
         run: |
           cd ./${{ steps.env.outputs.env_path }}
           terraform init
           terraform apply -auto-approve

   detect-changes:
     needs: terraform-apply
     runs-on: ubuntu-latest
     outputs:
       matrix: ${{ steps.detect.outputs.matrix }}
     steps:
       - name: Checkout code
         uses: actions/checkout@v3
         with:
           fetch-depth: 0

       - name: Detect service changes
         id: detect
         uses: ./.github/actions/detect-service-changes
         with:
           pr_mode: "false"
           services_input: ${{ github.event.inputs.services }}

   build-and-push:
     needs: detect-changes
     if: |
       fromJSON(needs.detect-changes.outputs.matrix).service[0] != null &&
       github.event.inputs.skip-build != 'true'
     runs-on: ubuntu-latest
     strategy:
       matrix: ${{ fromJSON(needs.detect-changes.outputs.matrix) }}
       fail-fast: false
     steps:
       - name: Checkout code
         uses: actions/checkout@v3

       - name: Set up Docker Buildx
         uses: docker/setup-buildx-action@v2

       - name: Configure AWS Credentials
         uses: aws-actions/configure-aws-credentials@v2
         with:
           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
           aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
           aws-region: us-east-1

       - name: Build and Push to ECR
         run: |
           chmod +x bin/docker
           ./bin/docker build ${{ matrix.service }} -p linux/amd64
           ./bin/docker push ${{ matrix.service }}

   deploy-to-ecs:
     needs: [detect-changes, build-and-push]
     runs-on: ubuntu-latest
     strategy:
       matrix: ${{ fromJSON(needs.detect-changes.outputs.matrix) }}
       fail-fast: false
     steps:
       - name: Checkout code
         uses: actions/checkout@v3

       - name: Configure AWS Credentials
         uses: aws-actions/configure-aws-credentials@v2
         with:
           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
           aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
           aws-region: us-east-1

       - name: Deploy to ECS
         run: |
           chmod +x bin/ecs
           if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
             STAGE="production"
           else
             echo "Error: Deployment triggered from unsupported branch: ${{ github.ref }}"
             exit 1
           fi

           ./bin/ecs deploy $STAGE ${{ matrix.service }}
