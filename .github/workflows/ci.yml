name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  check-all:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    # Setup Python environment
    - name: Install uv
      uses: astral-sh/setup-uv@v5
      with:
        enable-cache: true
        cache-dependency-glob: "py/uv.lock"
    
    - name: Set up Python
      run: uv python install 3.12
    
    # Setup Node.js environment
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 9.15.9
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'pnpm'
        cache-dependency-path: ts/pnpm-lock.yaml
    
    # Install all dependencies
    - name: Install all dependencies
      run: make install
    
    # Run format checks
    - name: Check code formatting
      run: make fmt-check
    
    # Run type checks
    - name: Check types
      run: make types
    
    # Run all tests
    - name: Run all tests
      run: make test
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testdb
    
    # Build all projects
    - name: Build all projects
      run: make build

  # terraform-check:
  #   runs-on: ubuntu-latest
    
  #   steps:
  #   - uses: actions/checkout@v4
    
  #   - name: Setup Terraform
  #     uses: hashicorp/setup-terraform@v3
  #     with:
  #       terraform_version: latest
    
  #   - name: Check Terraform formatting
  #     working-directory: iac
  #     run: make fmt-check
    
  #   - name: Validate Terraform configurations
  #     working-directory: iac
  #     run: make validate-all

  # docker-build-all:
  #   runs-on: ubuntu-latest
  #   needs: check-all
    
  #   steps:
  #   - uses: actions/checkout@v4
    
  #   - name: Set up Docker Buildx
  #     uses: docker/setup-buildx-action@v3
    
  #   - name: Build all Docker images
  #     run: make docker-build
    
  #   - name: List Docker images
  #     run: docker images | grep -E "(py-app|ts-api|ts-web)"