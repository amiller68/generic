# TODO (amiller68): docs describing how to get stuff from here injectable in kamal
#  it is potentially a little annoying

# Slug to describe what stage to load your environment from in op
# These variables should be gauranteed by:
#  - project config
#  - and our scripts that source this file
VAULT_SLUG=${PROJECT_NAME}-${STAGE}

# Cloud provider credentials
#  We assume that the `CLOUD_VAULT` var is exported
#  before you source this
# Everything in here in theory should be portable to other
#  projects you might manage in the same cloud provider.

# Terraform Cloud API token for workspace management.
#  This account will be set up with a new org for the project
#  Set up with new workspaces for all of our stages.
TF_TOKEN=op://${CLOUD_VAULT}/TERRAFORM_CLOUD_API_TOKEN/credential

# Docker Hub Access Token for container registry
#  This account will host
DOCKER_HUB_USERNAME=op://${CLOUD_VAULT}/DOCKER_HUB_LOGIN/username
# NOTE (amiller68): annoyingly this has to be your full ass docker hub password.
#  I am big assuming that if the project you're building off of this is any way successful
#  you will do something more secure, or have a more production friendly container registry
DOCKER_HUB_PASSWORD=op://${CLOUD_VAULT}/DOCKER_HUB_LOGIN/credential
DOCKER_HUB_TOKEN=op://${CLOUD_VAULT}/DOCKER_HUB_TOKEN/credential

# For managing DNS zones across your account in Cloudflare
#  This account must:
#  - own the root dns zone name you set up in .env.project
#  - have permissions to manage its DNS config
CLOUDFLARE_API_TOKEN=op://${CLOUD_VAULT}/CLOUDFLARE_DNS_API_TOKEN/credential

# NOTE (amiller68): i mapped the var name since the TF DigitalOcean provider expects DIGITALOCEAN_TOKEN
#  for deploying droplets on Digital Ocean
# Api token with access to a Digital Ocean Account
#  This account will end up owning the created resources.
#  It should have billing set up and have enough limits to deploy a few droplets
DIGITALOCEAN_TOKEN=op://${CLOUD_VAULT}/DO_API_TOKEN/credential

# App Configs
#  Everything below is stuff you need to power your applications.
#  These should be configured by stage

# /py

# Google OAuth Client
GOOGLE_O_AUTH_CLIENT_ID=op://${VAULT_SLUG}/GOOGLE_O_AUTH_CLIENT/username
GOOGLE_O_AUTH_CLIENT_SECRET=op://${VAULT_SLUG}/GOOGLE_O_AUTH_CLIENT/credential
