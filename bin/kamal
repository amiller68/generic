#!/usr/bin/env bash
set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
REPO_ROOT="$(dirname "$SCRIPT_DIR")"


# Function to show usage
usage() {
  echo "Run Kamal commands with Terraform-sourced credentials"
  echo ""
  echo "Usage: $0 <service> <kamal-command> [args]"
  echo ""
  echo "Services: py, ts-api, ts-web"
  echo ""
  echo "Examples:"
  echo "  $0 ts-web deploy"
  echo "  $0 ts-web logs"
  echo "  $0 ts-web rollback"
  exit 1
}

# Check arguments
if [[ $# -lt 2 ]]; then
  usage
fi

SERVICE="$1"
shift

# Validate service
case "$SERVICE" in
  py|ts-api|ts-web)
    ;;
  *)
    echo "Error: Unknown service: $SERVICE"
    echo "Available services: py, ts-api, ts-web"
    exit 1
    ;;
esac

CONFIG_FILE="$REPO_ROOT/config/deploy/${SERVICE}.yml"

# Check if config exists
if [[ ! -f "$CONFIG_FILE" ]]; then
  echo "Error: Config file not found: $CONFIG_FILE"
  exit 1
fi

# Get infrastructure outputs from Terraform
DROPLET_IP=$(cd "$REPO_ROOT" && ./bin/tf production output -raw digitalocean_droplet_ip)
SSH_PRIVATE_KEY=$(cd "$REPO_ROOT" && ./bin/tf production output digitalocean_ssh_private_key | sed -n '3,13p')

# Get Docker registry credentials from container-registry environment  
REGISTRY_ENDPOINT=""
REGISTRY_NAME=""
DOCKERHUB_USERNAME=""
if [[ -d "$REPO_ROOT/iac/envs/container-registry" ]]; then
  REGISTRY_INFO=$(cd "$REPO_ROOT" && ./bin/tf container-registry output -json registry 2>/dev/null || echo '{}')
  REGISTRY_ENDPOINT=$(echo "$REGISTRY_INFO" | jq -r '.endpoint' 2>/dev/null || echo '')
  REGISTRY_NAME=$(echo "$REGISTRY_INFO" | jq -r '.name' 2>/dev/null || echo '')
  DOCKER_CREDS=$(cd "$REPO_ROOT" && ./bin/tf container-registry output -raw registry_credentials 2>/dev/null || echo '')
  
  if [[ -n "$DOCKER_CREDS" ]]; then
    # Decode the base64 auth to get username and password
    AUTH_STRING=$(echo "$DOCKER_CREDS" | jq -r '.auths."registry.digitalocean.com".auth' 2>/dev/null || echo "")
    if [[ -n "$AUTH_STRING" ]]; then
      DECODED_AUTH=$(echo "$AUTH_STRING" | base64 -d)
      DOCKERHUB_USERNAME=$(echo "$DECODED_AUTH" | cut -d: -f1)
      DOCKERHUB_TOKEN=$(echo "$DECODED_AUTH" | cut -d: -f2)
    fi
  fi
fi

# Create SSH key file from Terraform and add to SSH agent
SSH_KEY_FILE="$REPO_ROOT/.kamal/ssh_key"
echo "$SSH_PRIVATE_KEY" > "$SSH_KEY_FILE"
chmod 600 "$SSH_KEY_FILE"

# Add key to SSH agent (force replace if already exists)
ssh-add -d "$SSH_KEY_FILE" 2>/dev/null || true
ssh-add "$SSH_KEY_FILE" 2>/dev/null || true

# Export for kamal config
export DROPLET_IP
export REGISTRY_ENDPOINT
export REGISTRY_NAME
export DOCKERHUB_USERNAME
export DOCKERHUB_TOKEN

ls -la "$SSH_KEY_FILE" 2>/dev/null || echo "SSH key file not found"

# Run kamal 
cd "$REPO_ROOT" && kamal "$@" -c "$CONFIG_FILE"